importScripts('https://cdn.socket.io/4.0.0/socket.io.min.js');

let socket;

self.onmessage = function(event) {
  const { action, payload } = event.data;

  switch (action) {
    case 'INIT_SOCKET':
      initSocket(payload);
      break;
    case 'SEND_MESSAGE':
      sendMessage(payload);
      break;
    case 'CLOSE_SOCKET':
      closeSocket();
      break;
    default:
      console.error('Unknown action:', action);
  }
};

function initSocket(url) {
  socket = io(url);

  socket.on('connect', () => {
    console.log('Socket.IO connection established');
  });

  socket.on('stock-update', (data) => {
    self.postMessage({ action: 'UPDATE_STOCKS', data });
  });

  socket.on('disconnect', () => {
    console.log('Socket.IO connection closed');
  });

  socket.on('connect_error', (error) => {
    console.error('Socket.IO connection error:', error);
  });
}

function sendMessage(message) {
  if (socket && socket.connected) {
    socket.emit('message', message);
  }
}

function closeSocket() {
  if (socket) {
    socket.disconnect();
  }
}

-----------------------------------------
import React, { useEffect, useRef, useState } from 'react';

const StockTable = () => {
  const [stocks, setStocks] = useState([]);
  const workerRef = useRef(null);

  useEffect(() => {
    workerRef.current = new Worker(new URL('./socketWorker.js', import.meta.url));

    workerRef.current.onmessage = (event) => {
      const { action, data } = event.data;

      switch (action) {
        case 'UPDATE_STOCKS':
          setStocks(data);
          break;
        default:
          console.error('Unknown action:', action);
      }
    };

    workerRef.current.postMessage({ action: 'INIT_SOCKET', payload: 'http://localhost:3000' });

    return () => {
      workerRef.current.postMessage({ action: 'CLOSE_SOCKET' });
      workerRef.current.terminate();
    };
  }, []);

  return (
    <table>
      <thead>
        <tr>
          <th>Symbol</th>
          <th>Price</th>
          <th>Change</th>
        </tr>
      </thead>
      <tbody>
        {stocks.map(stock => (
          <tr key={stock.symbol}>
            <td>{stock.symbol}</td>
            <td>{stock.price}</td>
            <td>{stock.change}</td>
          </tr>
        ))}
      </tbody>
    </table>
  );
};

export default StockTable;
---------------------------------------
module.exports = {
  // Các cấu hình khác...
  module: {
    rules: [
      {
        test: /\.worker\.js$/,
        use: { loader: 'worker-loader' },
      },
      // Các rule khác...
    ],
  },
};
